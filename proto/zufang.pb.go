// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zufang.proto

package landlady

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"

import time "time"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

type TaskMetadata struct {
	// 原始 URL
	OriginURL string `protobuf:"bytes,1,opt,name=originURL,proto3" json:"originURL,omitempty"`
	// 实际 URL
	RealURL string `protobuf:"bytes,2,opt,name=realURL,proto3" json:"realURL,omitempty"`
	// 去掉query的 URL
	ShortURL string `protobuf:"bytes,3,opt,name=shortURL,proto3" json:"shortURL,omitempty"`
	// 处理时间
	HandleAt time.Time `protobuf:"bytes,4,opt,name=handleAt,stdtime" json:"handleAt"`
	// 模块名称
	Module string `protobuf:"bytes,5,opt,name=module,proto3" json:"module,omitempty"`
}

func (m *TaskMetadata) Reset()                    { *m = TaskMetadata{} }
func (m *TaskMetadata) String() string            { return proto.CompactTextString(m) }
func (*TaskMetadata) ProtoMessage()               {}
func (*TaskMetadata) Descriptor() ([]byte, []int) { return fileDescriptorZufang, []int{0} }

type House struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *House) Reset()                    { *m = House{} }
func (m *House) String() string            { return proto.CompactTextString(m) }
func (*House) ProtoMessage()               {}
func (*House) Descriptor() ([]byte, []int) { return fileDescriptorZufang, []int{1} }

func init() {
	proto.RegisterType((*TaskMetadata)(nil), "landlady.TaskMetadata")
	proto.RegisterType((*House)(nil), "landlady.House")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Zufang service

type ZufangClient interface {
}

type zufangClient struct {
	cc *grpc.ClientConn
}

func NewZufangClient(cc *grpc.ClientConn) ZufangClient {
	return &zufangClient{cc}
}

// Server API for Zufang service

type ZufangServer interface {
}

func RegisterZufangServer(s *grpc.Server, srv ZufangServer) {
	s.RegisterService(&_Zufang_serviceDesc, srv)
}

var _Zufang_serviceDesc = grpc.ServiceDesc{
	ServiceName: "landlady.Zufang",
	HandlerType: (*ZufangServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "zufang.proto",
}

func (m *TaskMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OriginURL) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZufang(dAtA, i, uint64(len(m.OriginURL)))
		i += copy(dAtA[i:], m.OriginURL)
	}
	if len(m.RealURL) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintZufang(dAtA, i, uint64(len(m.RealURL)))
		i += copy(dAtA[i:], m.RealURL)
	}
	if len(m.ShortURL) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintZufang(dAtA, i, uint64(len(m.ShortURL)))
		i += copy(dAtA[i:], m.ShortURL)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintZufang(dAtA, i, uint64(types.SizeOfStdTime(m.HandleAt)))
	n1, err := types.StdTimeMarshalTo(m.HandleAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Module) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintZufang(dAtA, i, uint64(len(m.Module)))
		i += copy(dAtA[i:], m.Module)
	}
	return i, nil
}

func (m *House) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *House) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZufang(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func encodeVarintZufang(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TaskMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.OriginURL)
	if l > 0 {
		n += 1 + l + sovZufang(uint64(l))
	}
	l = len(m.RealURL)
	if l > 0 {
		n += 1 + l + sovZufang(uint64(l))
	}
	l = len(m.ShortURL)
	if l > 0 {
		n += 1 + l + sovZufang(uint64(l))
	}
	l = types.SizeOfStdTime(m.HandleAt)
	n += 1 + l + sovZufang(uint64(l))
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovZufang(uint64(l))
	}
	return n
}

func (m *House) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovZufang(uint64(l))
	}
	return n
}

func sovZufang(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozZufang(x uint64) (n int) {
	return sovZufang(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZufang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZufang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZufang
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZufang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZufang
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZufang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZufang
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandleAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZufang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZufang
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.HandleAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZufang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZufang
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZufang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZufang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *House) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZufang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: House: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: House: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZufang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZufang
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZufang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZufang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZufang(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZufang
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZufang
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZufang
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthZufang
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowZufang
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipZufang(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthZufang = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZufang   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("zufang.proto", fileDescriptorZufang) }

var fileDescriptorZufang = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xbf, 0x52, 0xb3, 0x40,
	0x14, 0xc5, 0xb3, 0xdf, 0x97, 0x20, 0xb9, 0xa6, 0x70, 0xb6, 0x70, 0x18, 0x74, 0x20, 0x93, 0x2a,
	0x8d, 0x30, 0x13, 0x5f, 0x40, 0x53, 0x59, 0x68, 0xc3, 0xc4, 0xc6, 0xee, 0x22, 0x9b, 0x85, 0x11,
	0xb8, 0x19, 0xd8, 0x2d, 0xf4, 0x29, 0x7c, 0x20, 0x1f, 0x80, 0xd2, 0x27, 0xf0, 0x0f, 0x4f, 0xe2,
	0xb0, 0x84, 0xa4, 0xbb, 0xbf, 0x7b, 0xce, 0xee, 0x9e, 0xb3, 0x30, 0x7b, 0xd3, 0x5b, 0x2c, 0x65,
	0xb0, 0xab, 0x48, 0x11, 0xb7, 0x73, 0x2c, 0x93, 0x1c, 0x93, 0x57, 0xd7, 0x97, 0x44, 0x32, 0x17,
	0xa1, 0xd9, 0xc7, 0x7a, 0x1b, 0xaa, 0xac, 0x10, 0xb5, 0xc2, 0x62, 0xd7, 0x5b, 0xdd, 0x2b, 0x99,
	0xa9, 0x54, 0xc7, 0xc1, 0x33, 0x15, 0xa1, 0x24, 0x49, 0x47, 0x67, 0x47, 0x06, 0xcc, 0xd4, 0xdb,
	0x17, 0x1f, 0x0c, 0x66, 0x1b, 0xac, 0x5f, 0x1e, 0x84, 0xc2, 0x04, 0x15, 0xf2, 0x4b, 0x98, 0x52,
	0x95, 0xc9, 0xac, 0x7c, 0x8c, 0xee, 0x1d, 0x36, 0x67, 0xcb, 0x69, 0x74, 0x5c, 0x70, 0x07, 0x4e,
	0x2a, 0x81, 0x79, 0xa7, 0xfd, 0x33, 0xda, 0x80, 0xdc, 0x05, 0xbb, 0x4e, 0xa9, 0x52, 0x9d, 0xf4,
	0xdf, 0x48, 0x07, 0xe6, 0x37, 0x60, 0xa7, 0x5d, 0x01, 0x71, 0xab, 0x9c, 0xf1, 0x9c, 0x2d, 0x4f,
	0x57, 0x6e, 0xd0, 0xf7, 0x08, 0x86, 0x74, 0xc1, 0x66, 0xe8, 0xb1, 0xb6, 0x9b, 0x2f, 0x7f, 0xf4,
	0xfe, 0xed, 0xb3, 0xe8, 0x70, 0x8a, 0x9f, 0x83, 0x55, 0x50, 0xa2, 0x73, 0xe1, 0x4c, 0xcc, 0xdd,
	0x7b, 0x5a, 0x5c, 0xc0, 0xe4, 0x8e, 0x74, 0x2d, 0x38, 0x87, 0x71, 0x89, 0x85, 0xd8, 0x27, 0x36,
	0xf3, 0xca, 0x06, 0xeb, 0xc9, 0xfc, 0xe2, 0xfa, 0xac, 0xf9, 0xf5, 0x46, 0x4d, 0xeb, 0xb1, 0xcf,
	0xd6, 0x63, 0x3f, 0xad, 0xc7, 0x62, 0xcb, 0x3c, 0x7c, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0x90,
	0x1d, 0x9b, 0x95, 0x68, 0x01, 0x00, 0x00,
}
