// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pages.proto

package landlady

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"

import time "time"

import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

type Page struct {
	Url     *URLInfo `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Content []byte   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// status
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// 处理时间
	HandleAt time.Time `protobuf:"bytes,4,opt,name=handleAt,stdtime" json:"handleAt"`
}

func (m *Page) Reset()                    { *m = Page{} }
func (m *Page) String() string            { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()               {}
func (*Page) Descriptor() ([]byte, []int) { return fileDescriptorPages, []int{0} }

type URLInfo struct {
	// 原始 URL
	OriginURL string `protobuf:"bytes,1,opt,name=originURL,proto3" json:"originURL,omitempty"`
	// 实际 URL
	RealURL string `protobuf:"bytes,2,opt,name=realURL,proto3" json:"realURL,omitempty"`
	// 去掉query的 URL
	ShortURL string `protobuf:"bytes,3,opt,name=shortURL,proto3" json:"shortURL,omitempty"`
}

func (m *URLInfo) Reset()                    { *m = URLInfo{} }
func (m *URLInfo) String() string            { return proto.CompactTextString(m) }
func (*URLInfo) ProtoMessage()               {}
func (*URLInfo) Descriptor() ([]byte, []int) { return fileDescriptorPages, []int{1} }

type PageList struct {
	Items []*Page `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *PageList) Reset()                    { *m = PageList{} }
func (m *PageList) String() string            { return proto.CompactTextString(m) }
func (*PageList) ProtoMessage()               {}
func (*PageList) Descriptor() ([]byte, []int) { return fileDescriptorPages, []int{2} }

func init() {
	proto.RegisterType((*Page)(nil), "landlady.Page")
	proto.RegisterType((*URLInfo)(nil), "landlady.URLInfo")
	proto.RegisterType((*PageList)(nil), "landlady.PageList")
}
func (m *Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Page) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Url != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPages(dAtA, i, uint64(m.Url.Size()))
		n1, err := m.Url.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPages(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPages(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintPages(dAtA, i, uint64(types.SizeOfStdTime(m.HandleAt)))
	n2, err := types.StdTimeMarshalTo(m.HandleAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *URLInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *URLInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OriginURL) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPages(dAtA, i, uint64(len(m.OriginURL)))
		i += copy(dAtA[i:], m.OriginURL)
	}
	if len(m.RealURL) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPages(dAtA, i, uint64(len(m.RealURL)))
		i += copy(dAtA[i:], m.RealURL)
	}
	if len(m.ShortURL) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPages(dAtA, i, uint64(len(m.ShortURL)))
		i += copy(dAtA[i:], m.ShortURL)
	}
	return i, nil
}

func (m *PageList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintPages(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Page) Size() (n int) {
	var l int
	_ = l
	if m.Url != nil {
		l = m.Url.Size()
		n += 1 + l + sovPages(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPages(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovPages(uint64(l))
	}
	l = types.SizeOfStdTime(m.HandleAt)
	n += 1 + l + sovPages(uint64(l))
	return n
}

func (m *URLInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.OriginURL)
	if l > 0 {
		n += 1 + l + sovPages(uint64(l))
	}
	l = len(m.RealURL)
	if l > 0 {
		n += 1 + l + sovPages(uint64(l))
	}
	l = len(m.ShortURL)
	if l > 0 {
		n += 1 + l + sovPages(uint64(l))
	}
	return n
}

func (m *PageList) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPages(uint64(l))
		}
	}
	return n
}

func sovPages(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPages(x uint64) (n int) {
	return sovPages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Url == nil {
				m.Url = &URLInfo{}
			}
			if err := m.Url.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPages
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandleAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.HandleAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *URLInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URLInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URLInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Page{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPages
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPages
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPages(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPages = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPages   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pages.proto", fileDescriptorPages) }

var fileDescriptorPages = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xbf, 0x6e, 0xf2, 0x30,
	0x14, 0xc5, 0x31, 0xf0, 0x41, 0x30, 0x9f, 0xaa, 0xd6, 0x43, 0x65, 0x45, 0x55, 0x88, 0x68, 0x87,
	0x2c, 0x35, 0x15, 0x7d, 0x81, 0x96, 0xad, 0x12, 0x43, 0x65, 0x95, 0xb1, 0x83, 0x01, 0x63, 0x2c,
	0x25, 0x31, 0x8a, 0x6f, 0x86, 0xbe, 0x45, 0xdf, 0xa0, 0xaf, 0xc3, 0xd8, 0x27, 0xe8, 0x1f, 0x9e,
	0xa4, 0xb2, 0x43, 0xc8, 0xe6, 0xdf, 0x3d, 0xc7, 0xd7, 0xe7, 0x18, 0x0f, 0x77, 0x42, 0x49, 0xcb,
	0x76, 0x85, 0x01, 0x43, 0x82, 0x54, 0xe4, 0xeb, 0x54, 0xac, 0xdf, 0xc2, 0x91, 0x32, 0x46, 0xa5,
	0x72, 0xe2, 0xe7, 0xcb, 0x72, 0x33, 0x01, 0x9d, 0x49, 0x0b, 0x22, 0xdb, 0x55, 0xd6, 0xf0, 0x56,
	0x69, 0xd8, 0x96, 0x4b, 0xb6, 0x32, 0xd9, 0x44, 0x19, 0x65, 0x1a, 0xa7, 0x23, 0x0f, 0xfe, 0x54,
	0xd9, 0xc7, 0x1f, 0x08, 0x77, 0x9f, 0x85, 0x92, 0xe4, 0x1a, 0x77, 0xca, 0x22, 0xa5, 0x28, 0x46,
	0xc9, 0x70, 0x7a, 0xc1, 0xea, 0x07, 0xd9, 0x82, 0xcf, 0x9f, 0xf2, 0x8d, 0xe1, 0x4e, 0x25, 0x14,
	0xf7, 0x57, 0x26, 0x07, 0x99, 0x03, 0x6d, 0xc7, 0x28, 0xf9, 0xcf, 0x6b, 0x24, 0x97, 0xb8, 0x67,
	0x41, 0x40, 0x69, 0x69, 0x27, 0x46, 0xc9, 0x80, 0x1f, 0x89, 0x3c, 0xe0, 0x60, 0xeb, 0x56, 0xc9,
	0x47, 0xa0, 0x5d, 0xbf, 0x3b, 0x64, 0x55, 0x05, 0x56, 0x07, 0x63, 0x2f, 0x75, 0x85, 0x59, 0xb0,
	0xff, 0x1a, 0xb5, 0xde, 0xbf, 0x47, 0x88, 0x9f, 0x6e, 0x8d, 0x5f, 0x71, 0xff, 0x98, 0x81, 0x5c,
	0xe1, 0x81, 0x29, 0xb4, 0xd2, 0xf9, 0x82, 0xcf, 0x7d, 0xd2, 0x01, 0x6f, 0x06, 0x2e, 0x5c, 0x21,
	0x45, 0xea, 0xb4, 0xb6, 0xd7, 0x6a, 0x24, 0x21, 0x0e, 0xec, 0xd6, 0x14, 0xe0, 0xa4, 0x2a, 0xde,
	0x89, 0xc7, 0x77, 0x38, 0x70, 0xfd, 0xe7, 0xda, 0x02, 0xb9, 0xc1, 0xff, 0x34, 0xc8, 0xcc, 0x52,
	0x14, 0x77, 0x92, 0xe1, 0xf4, 0xac, 0xf9, 0x05, 0x67, 0xe1, 0x95, 0x38, 0x3b, 0xdf, 0xff, 0x46,
	0xad, 0xfd, 0x21, 0x42, 0x9f, 0x87, 0x08, 0xfd, 0x1c, 0x22, 0xb4, 0xec, 0xf9, 0x2a, 0xf7, 0x7f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x53, 0x9d, 0x18, 0x23, 0xb4, 0x01, 0x00, 0x00,
}
