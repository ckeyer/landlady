// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: house.proto

/*
	Package landlady is a generated protocol buffer package.

	It is generated from these files:
		house.proto
		tasks.proto

	It has these top-level messages:
		TaskMetadata
		House
		Location
		LocationCoordinates
		Apartment
		User
		TaskProject
		TaksProjectList
		Task
		TaskList
		RequestTaskOption
*/
package landlady

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"

import time "time"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"
import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TaskMetadata struct {
	// 原始 URL
	OriginURL string `protobuf:"bytes,1,opt,name=originURL,proto3" json:"originURL,omitempty"`
	// 实际 URL
	RealURL string `protobuf:"bytes,2,opt,name=realURL,proto3" json:"realURL,omitempty"`
	// 去掉query的 URL
	ShortURL string `protobuf:"bytes,3,opt,name=shortURL,proto3" json:"shortURL,omitempty"`
	// 处理时间
	HandleAt time.Time `protobuf:"bytes,4,opt,name=handleAt,stdtime" json:"handleAt"`
	// 模块名称
	Module string `protobuf:"bytes,5,opt,name=module,proto3" json:"module,omitempty"`
	// 执行批次
	Batch string `protobuf:"bytes,6,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (m *TaskMetadata) Reset()                    { *m = TaskMetadata{} }
func (m *TaskMetadata) String() string            { return proto.CompactTextString(m) }
func (*TaskMetadata) ProtoMessage()               {}
func (*TaskMetadata) Descriptor() ([]byte, []int) { return fileDescriptorHouse, []int{0} }

type House struct {
	Metadata  *TaskMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Name      string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Price     int64         `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	PayWay    string        `protobuf:"bytes,4,opt,name=payWay,proto3" json:"payWay,omitempty"`
	RoomSize  int64         `protobuf:"varint,5,opt,name=roomSize,proto3" json:"roomSize,omitempty"`
	ReleaseAt time.Time     `protobuf:"bytes,6,opt,name=releaseAt,stdtime" json:"releaseAt"`
	Location  *Location     `protobuf:"bytes,7,opt,name=location" json:"location,omitempty"`
	Apartment *Apartment    `protobuf:"bytes,8,opt,name=apartment" json:"apartment,omitempty"`
}

func (m *House) Reset()                    { *m = House{} }
func (m *House) String() string            { return proto.CompactTextString(m) }
func (*House) ProtoMessage()               {}
func (*House) Descriptor() ([]byte, []int) { return fileDescriptorHouse, []int{1} }

type Location struct {
	Coordinates *LocationCoordinates `protobuf:"bytes,1,opt,name=coordinates" json:"coordinates,omitempty"`
	Province    string               `protobuf:"bytes,2,opt,name=province,proto3" json:"province,omitempty"`
	City        string               `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	County      string               `protobuf:"bytes,4,opt,name=county,proto3" json:"county,omitempty"`
	Street      string               `protobuf:"bytes,5,opt,name=street,proto3" json:"street,omitempty"`
	Additional  string               `protobuf:"bytes,6,opt,name=additional,proto3" json:"additional,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptorHouse, []int{2} }

// 地理位置
type LocationCoordinates struct {
	Lon float32 `protobuf:"fixed32,1,opt,name=lon,proto3" json:"lon,omitempty"`
	Lat float32 `protobuf:"fixed32,2,opt,name=lat,proto3" json:"lat,omitempty"`
}

func (m *LocationCoordinates) Reset()                    { *m = LocationCoordinates{} }
func (m *LocationCoordinates) String() string            { return proto.CompactTextString(m) }
func (*LocationCoordinates) ProtoMessage()               {}
func (*LocationCoordinates) Descriptor() ([]byte, []int) { return fileDescriptorHouse, []int{3} }

// 公寓
type Apartment struct {
	Name     string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Location *Location `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
}

func (m *Apartment) Reset()                    { *m = Apartment{} }
func (m *Apartment) String() string            { return proto.CompactTextString(m) }
func (*Apartment) ProtoMessage()               {}
func (*Apartment) Descriptor() ([]byte, []int) { return fileDescriptorHouse, []int{4} }

type User struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Phone string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorHouse, []int{5} }

func init() {
	proto.RegisterType((*TaskMetadata)(nil), "landlady.TaskMetadata")
	proto.RegisterType((*House)(nil), "landlady.House")
	proto.RegisterType((*Location)(nil), "landlady.Location")
	proto.RegisterType((*LocationCoordinates)(nil), "landlady.LocationCoordinates")
	proto.RegisterType((*Apartment)(nil), "landlady.Apartment")
	proto.RegisterType((*User)(nil), "landlady.User")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Zufang service

type ZufangClient interface {
}

type zufangClient struct {
	cc *grpc.ClientConn
}

func NewZufangClient(cc *grpc.ClientConn) ZufangClient {
	return &zufangClient{cc}
}

// Server API for Zufang service

type ZufangServer interface {
}

func RegisterZufangServer(s *grpc.Server, srv ZufangServer) {
	s.RegisterService(&_Zufang_serviceDesc, srv)
}

var _Zufang_serviceDesc = grpc.ServiceDesc{
	ServiceName: "landlady.Zufang",
	HandlerType: (*ZufangServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "house.proto",
}

func (m *TaskMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OriginURL) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHouse(dAtA, i, uint64(len(m.OriginURL)))
		i += copy(dAtA[i:], m.OriginURL)
	}
	if len(m.RealURL) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHouse(dAtA, i, uint64(len(m.RealURL)))
		i += copy(dAtA[i:], m.RealURL)
	}
	if len(m.ShortURL) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHouse(dAtA, i, uint64(len(m.ShortURL)))
		i += copy(dAtA[i:], m.ShortURL)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintHouse(dAtA, i, uint64(types.SizeOfStdTime(m.HandleAt)))
	n1, err := types.StdTimeMarshalTo(m.HandleAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Module) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHouse(dAtA, i, uint64(len(m.Module)))
		i += copy(dAtA[i:], m.Module)
	}
	if len(m.Batch) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintHouse(dAtA, i, uint64(len(m.Batch)))
		i += copy(dAtA[i:], m.Batch)
	}
	return i, nil
}

func (m *House) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *House) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHouse(dAtA, i, uint64(m.Metadata.Size()))
		n2, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHouse(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Price != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHouse(dAtA, i, uint64(m.Price))
	}
	if len(m.PayWay) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintHouse(dAtA, i, uint64(len(m.PayWay)))
		i += copy(dAtA[i:], m.PayWay)
	}
	if m.RoomSize != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHouse(dAtA, i, uint64(m.RoomSize))
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintHouse(dAtA, i, uint64(types.SizeOfStdTime(m.ReleaseAt)))
	n3, err := types.StdTimeMarshalTo(m.ReleaseAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.Location != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintHouse(dAtA, i, uint64(m.Location.Size()))
		n4, err := m.Location.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Apartment != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintHouse(dAtA, i, uint64(m.Apartment.Size()))
		n5, err := m.Apartment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coordinates != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHouse(dAtA, i, uint64(m.Coordinates.Size()))
		n6, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Province) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHouse(dAtA, i, uint64(len(m.Province)))
		i += copy(dAtA[i:], m.Province)
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHouse(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if len(m.County) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintHouse(dAtA, i, uint64(len(m.County)))
		i += copy(dAtA[i:], m.County)
	}
	if len(m.Street) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHouse(dAtA, i, uint64(len(m.Street)))
		i += copy(dAtA[i:], m.Street)
	}
	if len(m.Additional) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintHouse(dAtA, i, uint64(len(m.Additional)))
		i += copy(dAtA[i:], m.Additional)
	}
	return i, nil
}

func (m *LocationCoordinates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocationCoordinates) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lon != 0 {
		dAtA[i] = 0xd
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Lon))))
		i += 4
	}
	if m.Lat != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Lat))))
		i += 4
	}
	return i, nil
}

func (m *Apartment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Apartment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHouse(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Location != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHouse(dAtA, i, uint64(m.Location.Size()))
		n7, err := m.Location.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHouse(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHouse(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	return i, nil
}

func encodeVarintHouse(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TaskMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.OriginURL)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	l = len(m.RealURL)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	l = len(m.ShortURL)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	l = types.SizeOfStdTime(m.HandleAt)
	n += 1 + l + sovHouse(uint64(l))
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	l = len(m.Batch)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	return n
}

func (m *House) Size() (n int) {
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovHouse(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovHouse(uint64(m.Price))
	}
	l = len(m.PayWay)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	if m.RoomSize != 0 {
		n += 1 + sovHouse(uint64(m.RoomSize))
	}
	l = types.SizeOfStdTime(m.ReleaseAt)
	n += 1 + l + sovHouse(uint64(l))
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovHouse(uint64(l))
	}
	if m.Apartment != nil {
		l = m.Apartment.Size()
		n += 1 + l + sovHouse(uint64(l))
	}
	return n
}

func (m *Location) Size() (n int) {
	var l int
	_ = l
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 1 + l + sovHouse(uint64(l))
	}
	l = len(m.Province)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	l = len(m.County)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	l = len(m.Street)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	l = len(m.Additional)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	return n
}

func (m *LocationCoordinates) Size() (n int) {
	var l int
	_ = l
	if m.Lon != 0 {
		n += 5
	}
	if m.Lat != 0 {
		n += 5
	}
	return n
}

func (m *Apartment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovHouse(uint64(l))
	}
	return n
}

func (m *User) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	return n
}

func sovHouse(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHouse(x uint64) (n int) {
	return sovHouse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHouse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandleAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.HandleAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHouse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHouse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *House) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHouse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: House: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: House: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &TaskMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayWay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayWay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomSize", wireType)
			}
			m.RoomSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.ReleaseAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apartment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Apartment == nil {
				m.Apartment = &Apartment{}
			}
			if err := m.Apartment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHouse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHouse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHouse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &LocationCoordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Province = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field County", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.County = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Street", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Street = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Additional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Additional = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHouse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHouse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocationCoordinates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHouse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocationCoordinates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocationCoordinates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lon", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Lon = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Lat = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipHouse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHouse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Apartment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHouse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Apartment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Apartment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHouse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHouse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHouse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHouse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHouse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHouse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHouse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHouse
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHouse
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHouse(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHouse = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHouse   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("house.proto", fileDescriptorHouse) }

var fileDescriptorHouse = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xad, 0xf3, 0xaa, 0x7d, 0xc3, 0xa2, 0x9a, 0xa2, 0xca, 0x8a, 0x20, 0xa9, 0xbc, 0xea, 0x06,
	0x07, 0xc2, 0x8a, 0x15, 0x34, 0x6c, 0x58, 0x14, 0x21, 0x0d, 0xad, 0x90, 0xd8, 0xdd, 0xd8, 0x53,
	0x7b, 0x84, 0x3d, 0x63, 0x8d, 0xc7, 0x48, 0xe1, 0x2b, 0xf8, 0x24, 0x96, 0x91, 0xd8, 0x20, 0x3e,
	0x80, 0x47, 0xbe, 0x04, 0xcd, 0xf8, 0x15, 0x89, 0x4a, 0x88, 0xdd, 0x3d, 0xf7, 0x35, 0xf7, 0x9c,
	0x39, 0x30, 0x4d, 0x65, 0x55, 0xb2, 0xb0, 0x50, 0x52, 0x4b, 0xe2, 0x66, 0x28, 0xe2, 0x0c, 0xe3,
	0xed, 0x6c, 0x91, 0x48, 0x99, 0x64, 0x6c, 0x69, 0xf3, 0x9b, 0xea, 0x76, 0xa9, 0x79, 0xce, 0x4a,
	0x8d, 0x79, 0x51, 0xb7, 0xce, 0x1e, 0x25, 0x5c, 0xa7, 0xd5, 0x26, 0x8c, 0x64, 0xbe, 0x4c, 0x64,
	0x22, 0xfb, 0x4e, 0x83, 0x2c, 0xb0, 0x51, 0xdd, 0x1e, 0x7c, 0x77, 0xe0, 0xde, 0x35, 0x96, 0x1f,
	0x5e, 0x33, 0x8d, 0x31, 0x6a, 0x24, 0x0f, 0xc0, 0x93, 0x8a, 0x27, 0x5c, 0xdc, 0xd0, 0x2b, 0xdf,
	0x39, 0x77, 0x2e, 0x3c, 0xda, 0x27, 0x88, 0x0f, 0xc7, 0x8a, 0x61, 0x66, 0x6a, 0x03, 0x5b, 0x6b,
	0x21, 0x99, 0x81, 0x5b, 0xa6, 0x52, 0x69, 0x53, 0x1a, 0xda, 0x52, 0x87, 0xc9, 0x0b, 0x70, 0x53,
	0x43, 0x80, 0x5d, 0x6a, 0x7f, 0x74, 0xee, 0x5c, 0x4c, 0x57, 0xb3, 0xb0, 0xe6, 0x11, 0xb6, 0xd7,
	0x85, 0xd7, 0x2d, 0x8f, 0xb5, 0xbb, 0xfb, 0xb1, 0x38, 0xfa, 0xfc, 0x73, 0xe1, 0xd0, 0x6e, 0x8a,
	0x9c, 0xc1, 0x24, 0x97, 0x71, 0x95, 0x31, 0x7f, 0x6c, 0x77, 0x37, 0x88, 0xdc, 0x87, 0xf1, 0x06,
	0x75, 0x94, 0xfa, 0x13, 0x9b, 0xae, 0x41, 0xf0, 0x65, 0x00, 0xe3, 0x57, 0x46, 0x3e, 0xb2, 0x02,
	0x37, 0x6f, 0x98, 0x59, 0x32, 0xd3, 0xd5, 0x59, 0xd8, 0x6a, 0x19, 0x1e, 0xf2, 0xa6, 0x5d, 0x1f,
	0x21, 0x30, 0x12, 0x98, 0xb3, 0x86, 0xa0, 0x8d, 0xcd, 0x3b, 0x85, 0xe2, 0x11, 0xb3, 0xd4, 0x86,
	0xb4, 0x06, 0xe6, 0xaa, 0x02, 0xb7, 0xef, 0x70, 0x6b, 0x59, 0x79, 0xb4, 0x41, 0x46, 0x0b, 0x25,
	0x65, 0xfe, 0x96, 0x7f, 0xaa, 0xef, 0x1d, 0xd2, 0x0e, 0x93, 0x35, 0x78, 0x8a, 0x65, 0x0c, 0x4b,
	0x23, 0xc6, 0xe4, 0x3f, 0xc4, 0xe8, 0xc7, 0x48, 0x08, 0x6e, 0x26, 0x23, 0xd4, 0x5c, 0x0a, 0xff,
	0xd8, 0xae, 0x20, 0x3d, 0xab, 0xab, 0xa6, 0x42, 0xbb, 0x1e, 0xf2, 0x04, 0x3c, 0x2c, 0x50, 0xe9,
	0x9c, 0x09, 0xed, 0xbb, 0x76, 0xe0, 0xb4, 0x1f, 0xb8, 0x6c, 0x4b, 0xb4, 0xef, 0x0a, 0xbe, 0x3a,
	0xe0, 0xb6, 0x9b, 0xc8, 0x73, 0x98, 0x46, 0x52, 0xaa, 0x98, 0x0b, 0xd4, 0xac, 0x6c, 0x84, 0x7c,
	0xf8, 0xf7, 0x93, 0x2f, 0xfb, 0x26, 0x7a, 0x38, 0x61, 0x04, 0x29, 0x94, 0xfc, 0xc8, 0x45, 0xd4,
	0xca, 0xda, 0x61, 0x23, 0x77, 0xc4, 0xf5, 0xb6, 0x31, 0x8d, 0x8d, 0x8d, 0xb0, 0x91, 0xac, 0x84,
	0xee, 0x84, 0xad, 0x91, 0xc9, 0x97, 0x5a, 0x31, 0xa6, 0x5b, 0x1b, 0xd4, 0x88, 0xcc, 0x01, 0x30,
	0x8e, 0xb9, 0xb9, 0x01, 0xb3, 0xc6, 0x0b, 0x07, 0x99, 0xe0, 0x19, 0x9c, 0xde, 0x71, 0x23, 0x39,
	0x81, 0x61, 0x26, 0x85, 0xe5, 0x33, 0xa0, 0x26, 0xb4, 0x19, 0xd4, 0xf6, 0x46, 0x93, 0x41, 0x1d,
	0xbc, 0x01, 0xaf, 0x13, 0xa8, 0xb3, 0x86, 0x73, 0x60, 0x8d, 0xc3, 0xcf, 0x18, 0xfc, 0xfb, 0x33,
	0x82, 0xc7, 0x30, 0xba, 0x29, 0x99, 0xba, 0x73, 0x97, 0xb1, 0x59, 0x2a, 0x45, 0x2b, 0x52, 0x0d,
	0x56, 0x2e, 0x4c, 0xde, 0x57, 0xb7, 0x28, 0x92, 0xf5, 0xc9, 0xee, 0xf7, 0xfc, 0x68, 0xb7, 0x9f,
	0x3b, 0xdf, 0xf6, 0x73, 0xe7, 0xd7, 0x7e, 0xee, 0x6c, 0x26, 0xd6, 0x33, 0x4f, 0xff, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x73, 0x7a, 0xb4, 0x0d, 0x2f, 0x04, 0x00, 0x00,
}
