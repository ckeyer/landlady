// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tasks.proto

package landlady

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf2 "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"

import time "time"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

type TaskProject struct {
	Name       string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Module     string    `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	Desc       string    `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Status     string    `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	CountTasks int64     `protobuf:"varint,5,opt,name=countTasks,proto3" json:"countTasks,omitempty"`
	StartAt    time.Time `protobuf:"bytes,6,opt,name=startAt,stdtime" json:"startAt"`
}

func (m *TaskProject) Reset()                    { *m = TaskProject{} }
func (m *TaskProject) String() string            { return proto.CompactTextString(m) }
func (*TaskProject) ProtoMessage()               {}
func (*TaskProject) Descriptor() ([]byte, []int) { return fileDescriptorTasks, []int{0} }

type TaskProjectList struct {
	Items []*TaskProject `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *TaskProjectList) Reset()                    { *m = TaskProjectList{} }
func (m *TaskProjectList) String() string            { return proto.CompactTextString(m) }
func (*TaskProjectList) ProtoMessage()               {}
func (*TaskProjectList) Descriptor() ([]byte, []int) { return fileDescriptorTasks, []int{1} }

type Task struct {
	ProjectName string `protobuf:"bytes,1,opt,name=projectName,proto3" json:"projectName,omitempty"`
	Url         string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptorTasks, []int{2} }

type TaskList struct {
	Items []*Task `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *TaskList) Reset()                    { *m = TaskList{} }
func (m *TaskList) String() string            { return proto.CompactTextString(m) }
func (*TaskList) ProtoMessage()               {}
func (*TaskList) Descriptor() ([]byte, []int) { return fileDescriptorTasks, []int{3} }

type RequestTaskOption struct {
	ProjectName string `protobuf:"bytes,1,opt,name=projectName,proto3" json:"projectName,omitempty"`
	Count       int64  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *RequestTaskOption) Reset()                    { *m = RequestTaskOption{} }
func (m *RequestTaskOption) String() string            { return proto.CompactTextString(m) }
func (*RequestTaskOption) ProtoMessage()               {}
func (*RequestTaskOption) Descriptor() ([]byte, []int) { return fileDescriptorTasks, []int{4} }

func init() {
	proto.RegisterType((*TaskProject)(nil), "landlady.TaskProject")
	proto.RegisterType((*TaskProjectList)(nil), "landlady.TaskProjectList")
	proto.RegisterType((*Task)(nil), "landlady.Task")
	proto.RegisterType((*TaskList)(nil), "landlady.TaskList")
	proto.RegisterType((*RequestTaskOption)(nil), "landlady.RequestTaskOption")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Tasks service

type TasksClient interface {
	NewProject(ctx context.Context, in *TaskProject, opts ...grpc.CallOption) (*TaskProject, error)
	GetProject(ctx context.Context, in *TaskProject, opts ...grpc.CallOption) (*TaskProject, error)
	// 添加url任务
	PushTasks(ctx context.Context, in *TaskList, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// 添加单次任务完毕
	CompletePushing(ctx context.Context, in *TaskProject, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	RequestTasks(ctx context.Context, in *RequestTaskOption, opts ...grpc.CallOption) (*TaskList, error)
	HandleTasks(ctx context.Context, in *TaskList, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
}

type tasksClient struct {
	cc *grpc.ClientConn
}

func NewTasksClient(cc *grpc.ClientConn) TasksClient {
	return &tasksClient{cc}
}

func (c *tasksClient) NewProject(ctx context.Context, in *TaskProject, opts ...grpc.CallOption) (*TaskProject, error) {
	out := new(TaskProject)
	err := grpc.Invoke(ctx, "/landlady.Tasks/NewProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) GetProject(ctx context.Context, in *TaskProject, opts ...grpc.CallOption) (*TaskProject, error) {
	out := new(TaskProject)
	err := grpc.Invoke(ctx, "/landlady.Tasks/GetProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) PushTasks(ctx context.Context, in *TaskList, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/landlady.Tasks/PushTasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) CompletePushing(ctx context.Context, in *TaskProject, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/landlady.Tasks/CompletePushing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) RequestTasks(ctx context.Context, in *RequestTaskOption, opts ...grpc.CallOption) (*TaskList, error) {
	out := new(TaskList)
	err := grpc.Invoke(ctx, "/landlady.Tasks/RequestTasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) HandleTasks(ctx context.Context, in *TaskList, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/landlady.Tasks/HandleTasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tasks service

type TasksServer interface {
	NewProject(context.Context, *TaskProject) (*TaskProject, error)
	GetProject(context.Context, *TaskProject) (*TaskProject, error)
	// 添加url任务
	PushTasks(context.Context, *TaskList) (*google_protobuf2.Empty, error)
	// 添加单次任务完毕
	CompletePushing(context.Context, *TaskProject) (*google_protobuf2.Empty, error)
	RequestTasks(context.Context, *RequestTaskOption) (*TaskList, error)
	HandleTasks(context.Context, *TaskList) (*google_protobuf2.Empty, error)
}

func RegisterTasksServer(s *grpc.Server, srv TasksServer) {
	s.RegisterService(&_Tasks_serviceDesc, srv)
}

func _Tasks_NewProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).NewProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landlady.Tasks/NewProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).NewProject(ctx, req.(*TaskProject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landlady.Tasks/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).GetProject(ctx, req.(*TaskProject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_PushTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).PushTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landlady.Tasks/PushTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).PushTasks(ctx, req.(*TaskList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_CompletePushing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).CompletePushing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landlady.Tasks/CompletePushing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).CompletePushing(ctx, req.(*TaskProject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_RequestTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTaskOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).RequestTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landlady.Tasks/RequestTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).RequestTasks(ctx, req.(*RequestTaskOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_HandleTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).HandleTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landlady.Tasks/HandleTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).HandleTasks(ctx, req.(*TaskList))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tasks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "landlady.Tasks",
	HandlerType: (*TasksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewProject",
			Handler:    _Tasks_NewProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Tasks_GetProject_Handler,
		},
		{
			MethodName: "PushTasks",
			Handler:    _Tasks_PushTasks_Handler,
		},
		{
			MethodName: "CompletePushing",
			Handler:    _Tasks_CompletePushing_Handler,
		},
		{
			MethodName: "RequestTasks",
			Handler:    _Tasks_RequestTasks_Handler,
		},
		{
			MethodName: "HandleTasks",
			Handler:    _Tasks_HandleTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tasks.proto",
}

func (m *TaskProject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskProject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTasks(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Module) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTasks(dAtA, i, uint64(len(m.Module)))
		i += copy(dAtA[i:], m.Module)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTasks(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTasks(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if m.CountTasks != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTasks(dAtA, i, uint64(m.CountTasks))
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintTasks(dAtA, i, uint64(types.SizeOfStdTime(m.StartAt)))
	n1, err := types.StdTimeMarshalTo(m.StartAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *TaskProjectList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskProjectList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTasks(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProjectName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTasks(dAtA, i, uint64(len(m.ProjectName)))
		i += copy(dAtA[i:], m.ProjectName)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTasks(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *TaskList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTasks(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestTaskOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestTaskOption) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProjectName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTasks(dAtA, i, uint64(len(m.ProjectName)))
		i += copy(dAtA[i:], m.ProjectName)
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTasks(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func encodeVarintTasks(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TaskProject) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTasks(uint64(l))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovTasks(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTasks(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTasks(uint64(l))
	}
	if m.CountTasks != 0 {
		n += 1 + sovTasks(uint64(m.CountTasks))
	}
	l = types.SizeOfStdTime(m.StartAt)
	n += 1 + l + sovTasks(uint64(l))
	return n
}

func (m *TaskProjectList) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovTasks(uint64(l))
		}
	}
	return n
}

func (m *Task) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovTasks(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTasks(uint64(l))
	}
	return n
}

func (m *TaskList) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovTasks(uint64(l))
		}
	}
	return n
}

func (m *RequestTaskOption) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovTasks(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovTasks(uint64(m.Count))
	}
	return n
}

func sovTasks(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTasks(x uint64) (n int) {
	return sovTasks(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskProject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskProject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskProject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountTasks", wireType)
			}
			m.CountTasks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountTasks |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.StartAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTasks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskProjectList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskProjectList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskProjectList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TaskProject{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTasks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTasks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Task{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTasks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestTaskOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestTaskOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestTaskOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTasks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTasks(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTasks
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTasks
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTasks(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTasks = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTasks   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tasks.proto", fileDescriptorTasks) }

var fileDescriptorTasks = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x33, 0xa6, 0xad, 0xdd, 0x13, 0x71, 0xd7, 0x41, 0x97, 0x90, 0x85, 0x34, 0x04, 0x2f,
	0x0a, 0x62, 0x2a, 0xf5, 0xca, 0x3f, 0x2c, 0x6c, 0x45, 0x14, 0x94, 0x75, 0x09, 0xfb, 0x02, 0x69,
	0x3b, 0x66, 0xe3, 0x26, 0x99, 0x98, 0x39, 0x83, 0xec, 0xad, 0x4f, 0xe0, 0x4b, 0x09, 0xbd, 0xf4,
	0x09, 0xfc, 0xd3, 0x27, 0x91, 0x99, 0x69, 0x68, 0xea, 0x76, 0x41, 0x7a, 0x77, 0xce, 0x97, 0xdf,
	0x99, 0x6f, 0xce, 0x37, 0x01, 0x07, 0x13, 0x71, 0x29, 0xa2, 0xaa, 0xe6, 0xc8, 0x69, 0x3f, 0x4f,
	0xca, 0x79, 0x9e, 0xcc, 0xaf, 0xbc, 0xa3, 0x94, 0xf3, 0x34, 0x67, 0x23, 0xad, 0x4f, 0xe5, 0xc7,
	0x11, 0x2b, 0x2a, 0xbc, 0x32, 0x98, 0x37, 0xf8, 0xf7, 0x23, 0x66, 0x05, 0x13, 0x98, 0x14, 0xd5,
	0x0a, 0x78, 0x9c, 0x66, 0x78, 0x21, 0xa7, 0xd1, 0x8c, 0x17, 0xa3, 0x94, 0xa7, 0x7c, 0x4d, 0xaa,
	0x4e, 0x37, 0xba, 0x32, 0x78, 0xf8, 0x9d, 0x80, 0x73, 0x9e, 0x88, 0xcb, 0xb3, 0x9a, 0x7f, 0x62,
	0x33, 0xa4, 0x14, 0x3a, 0x65, 0x52, 0x30, 0x97, 0x04, 0x64, 0xb8, 0x17, 0xeb, 0x9a, 0x1e, 0x42,
	0xaf, 0xe0, 0x73, 0x99, 0x33, 0xf7, 0x96, 0x56, 0x57, 0x9d, 0x62, 0xe7, 0x4c, 0xcc, 0x5c, 0xdb,
	0xb0, 0xaa, 0x56, 0xac, 0xc0, 0x04, 0xa5, 0x70, 0x3b, 0x86, 0x35, 0x1d, 0xf5, 0x01, 0x66, 0x5c,
	0x96, 0xa8, 0xbc, 0x84, 0xdb, 0x0d, 0xc8, 0xd0, 0x8e, 0x5b, 0x0a, 0x3d, 0x86, 0xdb, 0x02, 0x93,
	0x1a, 0x4f, 0xd0, 0xed, 0x05, 0x64, 0xe8, 0x8c, 0xbd, 0xc8, 0x6c, 0x1a, 0x35, 0xf7, 0x8f, 0xce,
	0x9b, 0x4d, 0x27, 0xfd, 0xc5, 0xcf, 0x81, 0xf5, 0xed, 0xd7, 0x80, 0xc4, 0xcd, 0x50, 0x78, 0x0c,
	0xfb, 0xad, 0x35, 0xde, 0x67, 0x02, 0xe9, 0x23, 0xe8, 0x66, 0xc8, 0x0a, 0xe1, 0x92, 0xc0, 0x1e,
	0x3a, 0xe3, 0x07, 0x51, 0x93, 0x70, 0xd4, 0x22, 0x63, 0xc3, 0x84, 0xcf, 0xa1, 0xa3, 0x54, 0x1a,
	0x80, 0x53, 0x99, 0x2f, 0xa7, 0xeb, 0x18, 0xda, 0x12, 0x3d, 0x00, 0x5b, 0xd6, 0xf9, 0x2a, 0x0a,
	0x55, 0x86, 0x4f, 0xa0, 0xaf, 0x66, 0xb5, 0xe9, 0xc3, 0x4d, 0xd3, 0xbb, 0x9b, 0xa6, 0x8d, 0xdb,
	0x3b, 0xb8, 0x17, 0xb3, 0xcf, 0x92, 0x09, 0xbd, 0xfd, 0x87, 0x0a, 0x33, 0x5e, 0xfe, 0x87, 0xf5,
	0x7d, 0xe8, 0xea, 0xc8, 0xb4, 0xb9, 0x1d, 0x9b, 0x66, 0xfc, 0xd5, 0x86, 0xae, 0x09, 0xf1, 0x25,
	0xc0, 0x29, 0xfb, 0xd2, 0x3c, 0xe5, 0xf6, 0x85, 0xbd, 0xed, 0x72, 0x68, 0xa9, 0xe9, 0x37, 0x0c,
	0x77, 0x9d, 0x7e, 0x06, 0x7b, 0x67, 0x52, 0x5c, 0x98, 0x8b, 0xd0, 0x4d, 0x4a, 0x25, 0xe3, 0x1d,
	0x5e, 0x7b, 0xd0, 0xd7, 0xea, 0xbf, 0x0e, 0x2d, 0x3a, 0x81, 0xfd, 0x57, 0xbc, 0xa8, 0x72, 0x86,
	0x4c, 0x1d, 0x91, 0x95, 0xe9, 0x4d, 0xee, 0x37, 0x9f, 0x71, 0x02, 0x77, 0x5a, 0x89, 0x0a, 0x7a,
	0xb4, 0x3e, 0xe0, 0x5a, 0xd2, 0xde, 0x96, 0xeb, 0x85, 0x16, 0x7d, 0x01, 0xce, 0x5b, 0x25, 0xb3,
	0x1d, 0x76, 0x98, 0x1c, 0x2c, 0xfe, 0xf8, 0xd6, 0x62, 0xe9, 0x93, 0x1f, 0x4b, 0x9f, 0xfc, 0x5e,
	0xfa, 0x64, 0xda, 0xd3, 0xcc, 0xd3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x5c, 0xf7, 0x9f,
	0xe6, 0x03, 0x00, 0x00,
}
